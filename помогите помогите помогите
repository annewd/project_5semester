class Node: 
	def __init__(self, value = None): 
		self.value = value 
		self.right = None 
		self.left = None 
	def get_value(self): 
		return self.value 
	def get_left(self): 
		return self.left 
	def get_right(self): 
		return self.right 
	def add_in_node(self, elem): 
		if self.value == None: 
			self.value = elem.value 
 
		if elem.value > self.value and self.right == None: 
			self.right = elem 
		elif elem.value > self.value and self.right != None:
			self.right.add_in_node(elem) 
		if elem.value < self.value and self.left != None: 
			self.left.add_in_node(elem) 
		elif elem.value < self.value and self.left == None:
			self.left = elem 
	def print_Node(self): 
		if self.value == None:
		    return 
		print(self.value) 
		if self.left != None: 
			self.left.print_Node() 
		if self.rigth != None: 
			self.right.print_Node() 
	def __iter__(self): 
		if self.left is not None: 
			yield from self.left 
			yield self.value 
		if self.right is not None: 
			yield from self.right 
 
class BinTree: 
	def __init__(self): 
		self.start = Node() 
	def add_in_tree(self, value): 
		elem = Node(value) 
		self.start.add_in_node(elem) 
 
	def print_tree(self): 
		self.start.print_Node() 
 
	def __iter__(self): 
		self.__curr = self.start 
		return iter(self.start) 
 
n = list(map(int,input().split()))
bt = BinTree() 
for i in n:
    bt.add_in_tree(i)
for a in bt:
    print(a)
bt.print_node()
